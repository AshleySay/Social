{"ast":null,"code":"var _jsxFileName = \"/home/ashley/Desktop/Social-master/frontend/src/components/SyllableCount.js\";\nimport React from 'react';\n\nasync function logit(entry) {\n  console.log(entry);\n  fetch(`https://api.datamuse.com/words?sp=${entry}&md=s&max=1`, {\n    \"method\": \"GET\"\n  }).then(response => response.json()).then(data => array.push(parseInt(data[0].numSyllables)));\n}\n\nexport default function SyllableCount(props) {\n  const regex = /[a-zA-Z]+\\b/gm;\n  let str = props.string;\n  let m;\n  let array = [];\n\n  while ((m = regex.exec(str)) !== null) {\n    if (m.index === regex.lastIndex) {\n      regex.lastIndex++;\n    }\n\n    for (const entry of m) {\n      logit(entry);\n      fetch(`https://api.datamuse.com/words?sp=${entry}&md=s&max=1`, {\n        \"method\": \"GET\"\n      }).then(response => response.json()).then(data => array.push(parseInt(data[0].numSyllables)));\n    } // m.forEach((match, groupIndex) => {\n    //     fetch(`https://api.datamuse.com/words?sp=${match}&md=s&max=1`, {\n    //     \"method\": \"GET\"\n    //     })\n    //     .then(response => response.json())\n    //     .then(data => {\n    //         array.push(parseInt(data[0].numSyllables))\n    //     })\n    //     .catch(err => {\n    //         console.log(err)\n    //     });\n    // });\n\n  }\n\n  let sum = array.reduce((a, b) => a + b, 0);\n  console.log(sum);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, sum);\n}","map":{"version":3,"sources":["/home/ashley/Desktop/Social-master/frontend/src/components/SyllableCount.js"],"names":["React","logit","entry","console","log","fetch","then","response","json","data","array","push","parseInt","numSyllables","SyllableCount","props","regex","str","string","m","exec","index","lastIndex","sum","reduce","a","b"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAeC,KAAf,CAAqBC,KAArB,EAA4B;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,EAAAA,KAAK,CAAE,qCAAoCH,KAAM,aAA5C,EAA0D;AAAE,cAAW;AAAb,GAA1D,CAAL,CACCI,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIC,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACH,IAAI,CAAC,CAAD,CAAJ,CAAQI,YAAT,CAAnB,CAFd;AAIH;;AAGD,eAAe,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAE1C,QAAMC,KAAK,GAAG,eAAd;AACA,MAAIC,GAAG,GAAGF,KAAK,CAACG,MAAhB;AACA,MAAIC,CAAJ;AACA,MAAIT,KAAK,GAAG,EAAZ;;AACA,SAAO,CAACS,CAAC,GAAGH,KAAK,CAACI,IAAN,CAAWH,GAAX,CAAL,MAA0B,IAAjC,EAAuC;AACnC,QAAIE,CAAC,CAACE,KAAF,KAAYL,KAAK,CAACM,SAAtB,EAAiC;AAC7BN,MAAAA,KAAK,CAACM,SAAN;AACH;;AAEL,SAAK,MAAMpB,KAAX,IAAoBiB,CAApB,EAAuB;AAEnBlB,MAAAA,KAAK,CAACC,KAAD,CAAL;AACAG,MAAAA,KAAK,CAAE,qCAAoCH,KAAM,aAA5C,EAA0D;AAAE,kBAAW;AAAb,OAA1D,CAAL,CACCI,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIC,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACH,IAAI,CAAC,CAAD,CAAJ,CAAQI,YAAT,CAAnB,CAFd;AAGE,KAXiC,CAevC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACC;;AACD,MAAIU,GAAG,GAAGb,KAAK,CAACc,MAAN,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA3B,EAA8B,CAA9B,CAAV;AACAvB,EAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,GAAN,CADJ;AAGH","sourcesContent":["import React from 'react'\n\nasync function logit(entry) {\n    console.log(entry)\n    fetch(`https://api.datamuse.com/words?sp=${entry}&md=s&max=1`, { \"method\" : \"GET\"})\n    .then(response => response.json())\n    .then(data => array.push(parseInt(data[0].numSyllables))\n    )\n}\n\n\nexport default function SyllableCount (props) {\n\n    const regex = /[a-zA-Z]+\\b/gm;\n    let str = props.string;\n    let m\n    let array = []\n    while ((m = regex.exec(str)) !== null) {\n        if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n        }\n\n    for (const entry of m) {\n\n        logit(entry)\n        fetch(`https://api.datamuse.com/words?sp=${entry}&md=s&max=1`, { \"method\" : \"GET\"})\n        .then(response => response.json())\n        .then(data => array.push(parseInt(data[0].numSyllables))\n        )}\n\n\n\n    // m.forEach((match, groupIndex) => {\n    //     fetch(`https://api.datamuse.com/words?sp=${match}&md=s&max=1`, {\n    //     \"method\": \"GET\"\n    //     })\n    //     .then(response => response.json())\n    //     .then(data => {\n    //         array.push(parseInt(data[0].numSyllables))\n    //     })\n    //     .catch(err => {\n    //         console.log(err)\n\n    //     });\n    // });\n    }\n    let sum = array.reduce((a, b) => a + b, 0)\n    console.log(sum)\n    return (\n        <div>{sum}</div>\n    )\n}"]},"metadata":{},"sourceType":"module"}